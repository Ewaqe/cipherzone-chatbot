networks:
  app_network:
    driver: bridge

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: cipherzone
      POSTGRES_PASSWORD: cipherzone
      POSTGRES_DB: cipherzone
    ports:
      - "5430:5432"
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U cipherzone -d cipherzone" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - app_network

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  bot:
    build:
      context: ./bot
    container_name: bot
    environment:
      - BOT_TOKEN=5189919714:AAFj18TMUxLcgNtr61iBVN-nNPUd5HpNfeY
      - ADMINS=1663095778
      - BASE_URL=http://nginx
      - KAFKA_BROKER=kafka:9092
      - COUNTERS_TOPIC=counters 
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network

  orchestrator_service:
    build:
      context: .
      dockerfile: orchestrator_service/Dockerfile
    container_name: orchestrator_service
    ports:
      - '8000:8000'
    volumes:
      - ./models:/models
    environment:
      - KAFKA_BROKER=kafka:9092
      - REQUESTS_TOPIC=requests
      - RESPONSES_TOPIC=responses
      - RAG_TOPIC=rag
      - MODEL_PATH=./models/Q4_K_M.gguf
      - PG_LOGIN=cipherzone
      - PG_PASSWORD=cipherzone
      - PG_DB=cipherzone
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network

  housing_service:
    build:
      context: .
      dockerfile: housing_service/Dockerfile
    container_name: housing_service
    ports:
      - '8001:8001'
    environment:
      - KAFKA_BROKER=kafka:9092
      - REQUESTS_TOPIC=requests
      - RESPONSES_TOPIC=responses
      - RAG_TOPIC=rag
      - COUNTERS_TOPIC=counters
      - MODEL_PATH=./models/Q4_K_M.gguf
      - PG_LOGIN=cipherzone
      - PG_PASSWORD=cipherzone
      - PG_DB=cipherzone
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - orchestrator_service
      - housing_service
    networks:
      - app_network
